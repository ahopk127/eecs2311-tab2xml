@startuml
class Score<E extends Staff<? extends Line>> implements Iterable{
  +{static} int DEFAULT_BEATS = 4
  +{static} int DEFAULT_BEATTYPE = 4
  +{static} int DEFAULT_DIVISION = 2

  -Optional<Integer> beats;
  -Optional<Integer> beatTYpe;
  -Optional<Integer> division;

  -List<E> staffs
  -List<Measure<? extends Note>> measures
  -{static} int accumulateMeasure
  -{static} int accumulateMeasureScore

  +Score()
  +addStaff(E e) : boolean
  +size() : int
  +getStaffs() : List<E>
  +getMeasures() : List<Measure<? extends Note>>
  +getNoteCount() : int
  +numberOfMeasures() : int
  +processMeasures() : void
  +getMeasure(int) : ImmutablePair<Range, Range>
  +iterator() : Iterator<E>
  +measureIterator() : Iterator<Measure<? extends Note>>
  +toString() : String
  +{static}getAccumulateMeasure() : int
  +{static}setAccumulateMeasure() : void
  +{static}getAccumulateMeasureScore() : int
  +{static}setAccumulateMeasureScore() : void
}

class ScoreIterator<T> {
  -int index
  -List<T> staffs
  
  +ScoreIterator(List<T>)
  +hasNext() : boolean
  +next() : T
}

class MeasureIterator<T> {
  -int index
  -List<T> measures
  
  +MeasureIterator(List<T>)
  +hasNext() : boolean
  +next() : T
}

interface Iterator<T> {}
interface Iterable<E> {}
class ScoreIterator {}
class MeasureIterator {}

abstract class Staff<E extends Line> implements Iterable{
  -Optional<Integer> beats;
  -Optional<Integer> beatTYpe;
  -Optional<Integer> division;
  #Stack<Note> repeatNoteStack;
  
  +Staff()
  +{abstract} add(E): boolean
  +{abstract} addLines(Collection<? extends E>) : boolean
  +{abstract} getLines() : List<E>
  +{abstract} numberOfMeasures() : int
  +{abstract} lineCount() : String
  +{abstract} size() : int
  +{abstract} width() : int
  +{abstract} getNotes() : TreeSet<Note>
  +{abstract} noteIterator() : Iterator<Note>
  +{abstract} measureIterator() : Iterator<Measure<Note>
  +{abstract} iterator() : Iterator<E>
  +getNoteCount() : int
  +toString() : String
  +time() : String
  +toList() : List<LinkedList<LineItem>>
}

class Measure<E extends Note> implements Comparable{}

Score +-- ScoreIterator
Score +-- MeasureIterator
Score "*" *-left- Measure
Score "*" *-- Staff
Iterator <|-[dashed]- ScoreIterator
Iterator <|-[dashed]- MeasureIterator
GuitarStaff <|-left- Staff
DrumStaff <|-left- Staff
@enduml